rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isProjectMember(projectId) {
      return isSignedIn() && 
        exists(/databases/$(database)/documents/projects/$(projectId)/team/$(request.auth.uid));
    }
    
    function hasRole(projectId, role) {
      return isSignedIn() && 
        get(/databases/$(database)/documents/projects/$(projectId)/team/$(request.auth.uid)).data.role == role;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if false; // Prevent user deletion
    }

    // Organization settings
    match /settings/organization {
      allow read: if isSignedIn();
      allow write: if hasRole('admin', 'admin');
    }

    // Projects collection
    match /projects/{projectId} {
      allow read: if isSignedIn() && isProjectMember(projectId);
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && (
        hasRole(projectId, 'admin') || 
        hasRole(projectId, 'manager')
      );

      // Team members subcollection
      match /team/{userId} {
        allow read: if isSignedIn() && isProjectMember(projectId);
        allow write: if isSignedIn() && hasRole(projectId, 'admin');
      }
    }

    // Folders collection
    match /folders/{folderId} {
      allow read: if isSignedIn() && isProjectMember(resource.data.projectId);
      allow create: if isSignedIn() && isProjectMember(request.resource.data.projectId);
      allow update, delete: if isSignedIn() && (
        hasRole(resource.data.projectId, 'admin') || 
        hasRole(resource.data.projectId, 'manager')
      );

      // Documents subcollection
      match /documents/{documentId} {
        allow read: if isSignedIn() && isProjectMember(get(/databases/$(database)/documents/folders/$(folderId)).data.projectId);
        allow create: if isSignedIn() && isProjectMember(get(/databases/$(database)/documents/folders/$(folderId)).data.projectId);
        allow update, delete: if isSignedIn() && (
          hasRole(get(/databases/$(database)/documents/folders/$(folderId)).data.projectId, 'admin') ||
          hasRole(get(/databases/$(database)/documents/folders/$(folderId)).data.projectId, 'manager') ||
          request.auth.uid == resource.data.createdBy
        );
      }
    }

    // Tasks collection
    match /tasks/{taskId} {
      allow read: if isSignedIn() && isProjectMember(resource.data.projectId);
      allow create: if isSignedIn() && isProjectMember(request.resource.data.projectId);
      allow update: if isSignedIn() && (
        isProjectMember(resource.data.projectId) &&
        (
          resource.data.assignedTo == request.auth.uid ||
          hasRole(resource.data.projectId, 'manager') ||
          hasRole(resource.data.projectId, 'admin')
        )
      );
      allow delete: if isSignedIn() && (
        hasRole(resource.data.projectId, 'admin') ||
        hasRole(resource.data.projectId, 'manager')
      );
    }

    // Milestones collection
    match /milestones/{milestoneId} {
      allow read: if isSignedIn() && isProjectMember(resource.data.projectId);
      allow create: if isSignedIn() && isProjectMember(request.resource.data.projectId);
      allow update, delete: if isSignedIn() && (
        hasRole(resource.data.projectId, 'admin') ||
        hasRole(resource.data.projectId, 'manager')
      );
    }
  }
}